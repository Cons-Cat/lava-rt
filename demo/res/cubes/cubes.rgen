#version 460 core
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require

#include "cubes.inc"

layout (std140, set = 0, binding = 0) uniform ubo_uniforms {
    uniform_data uniforms;
};

layout (set = 0, binding = 1, rgba16f) restrict writeonly uniform image2D img_output;

layout (set = 1, binding = 0) uniform accelerationStructureNV top_level_as;

layout (location = 0) rayPayloadNV ray_payload payload;

void main() {
    ivec2 coords = ivec2(gl_LaunchIDNV.xy);
    vec2 pixel_center = vec2(coords) + vec2(0.5);
    vec2 uv = pixel_center / vec2(gl_LaunchSizeNV.xy);

    //orthographic projection
    //vec3 cam_position = vec3(uv * 2.0 - 1.0, 0.0);
    //vec3 direction = vec3(0.0, 0.0, 1.0);

    // perspective projection
    vec4 cam_position = uniforms.inv_view * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = uniforms.inv_proj * vec4(uv * 2.0 - 1.0, 1.0, 1.0);
    vec4 direction = uniforms.inv_view * vec4(normalize(target.xyz), 0.0);

    traceNV(top_level_as,
            gl_RayFlagsOpaqueNV,
            0xff,
            0, 0, 0,
            cam_position.xyz,
            0.001, // min distance
            direction.xyz,
            1000.0, // max distance
            0 // payload location
            );

    imageStore(img_output, coords, vec4(payload.color, 1.0));
}
