#version 460 core
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "cubes.inc"

layout (std140, set = 0, binding = 0) uniform ubo_uniforms {
    uniform_data uniforms;
};

layout (rgba16f, set = 0, binding = 1) restrict writeonly uniform image2D img_output;

layout (set = 1, binding = 0) uniform accelerationStructureEXT top_level_as;

layout (location = 0) rayPayloadEXT ray_payload payload;

void main() {
    ivec2 coords = ivec2(gl_LaunchIDEXT.xy);
    vec2 pixel_center = vec2(coords) + vec2(0.5);
    vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);

    vec4 cam_position = uniforms.inv_view * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = uniforms.inv_proj * vec4(uv * 2.0 - 1.0, 1.0, 1.0);
    vec4 direction = uniforms.inv_view * vec4(normalize(target.xyz), 0.0);

    payload.finished = false;
    payload.position = cam_position.xyz;
    payload.direction = direction.xyz;

    uint depth = 0;

    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);

    while(!payload.finished && depth < uniforms.max_depth) {
        traceRayEXT(
            top_level_as,
            gl_RayFlagsOpaqueEXT | gl_RayFlagsCullBackFacingTrianglesEXT,
            0xff,
            0, // SBT hit group index
            0, // SBT record stride
            0, // SBT miss index
            payload.position,
            0.001, // min distance
            payload.direction,
            5.0, // max distance
            0 // payload location
            );

        color.rgb += payload.color.rgb; // specular reflection
        depth++;
    }

    imageStore(img_output, coords, vec4(color.rgb, 1.0));
}
